<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JSON语法</title>
      <link href="/2024/05/15/JSON%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/05/15/JSON%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="JSON语法"><a href="#JSON语法" class="headerlink" title="JSON语法"></a>JSON语法</h2><h3 id="JSON语法支持表示3种类型的值"><a href="#JSON语法支持表示3种类型的值" class="headerlink" title="JSON语法支持表示3种类型的值"></a>JSON语法支持表示3种类型的值</h3><h4 id="1、简单值：字符串、数值、布尔值-和-null-可以在-JSON-中出现，就像在-JavaScript-中一样，特殊值-undefined-不可以出现。（例如：5就是一个数值，它也是有效的JSON值，”hello”字符串也是有效的JSON值，JSON字符串和JavaScript字符串最主要的区别就是JSON必须使用双引号，单引号会导致语法错误。布尔值和null也是有效的JSON值）"><a href="#1、简单值：字符串、数值、布尔值-和-null-可以在-JSON-中出现，就像在-JavaScript-中一样，特殊值-undefined-不可以出现。（例如：5就是一个数值，它也是有效的JSON值，”hello”字符串也是有效的JSON值，JSON字符串和JavaScript字符串最主要的区别就是JSON必须使用双引号，单引号会导致语法错误。布尔值和null也是有效的JSON值）" class="headerlink" title="1、简单值：字符串、数值、布尔值 和 null 可以在 JSON 中出现，就像在 JavaScript 中一样，特殊值 undefined 不可以出现。（例如：5就是一个数值，它也是有效的JSON值，”hello”字符串也是有效的JSON值，JSON字符串和JavaScript字符串最主要的区别就是JSON必须使用双引号，单引号会导致语法错误。布尔值和null也是有效的JSON值）"></a>1、简单值：字符串、数值、布尔值 和 null 可以在 JSON 中出现，就像在 JavaScript 中一样，特殊值 undefined 不可以出现。（例如：5就是一个数值，它也是有效的JSON值，”hello”字符串也是有效的JSON值，JSON字符串和JavaScript字符串最主要的区别就是JSON必须使用双引号，单引号会导致语法错误。布尔值和null也是有效的JSON值）</h4><h4 id="2、对象：第一种复杂数据类型，对象表示有序-键-值-对，每个值都可以是简单值，也可以是复杂类型。（与JavaScript对象相比，JSON主要有两处不同。首先，没有变量声明，因为JSON里面没有变量的概念。其次，最后没有分号，同时，要用双引号将属性名包起来才是有效的JSON）"><a href="#2、对象：第一种复杂数据类型，对象表示有序-键-值-对，每个值都可以是简单值，也可以是复杂类型。（与JavaScript对象相比，JSON主要有两处不同。首先，没有变量声明，因为JSON里面没有变量的概念。其次，最后没有分号，同时，要用双引号将属性名包起来才是有效的JSON）" class="headerlink" title="2、对象：第一种复杂数据类型，对象表示有序 键&#x2F;值 对，每个值都可以是简单值，也可以是复杂类型。（与JavaScript对象相比，JSON主要有两处不同。首先，没有变量声明，因为JSON里面没有变量的概念。其次，最后没有分号，同时，要用双引号将属性名包起来才是有效的JSON）"></a>2、对象：第一种复杂数据类型，对象表示有序 键&#x2F;值 对，每个值都可以是简单值，也可以是复杂类型。（与JavaScript对象相比，JSON主要有两处不同。首先，没有变量声明，因为JSON里面没有变量的概念。其次，最后没有分号，同时，要用双引号将属性名包起来才是有效的JSON）</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个JSON对象</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhangsan&quot;</span> <span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span> <span class="punctuation">&#125;</span>;</span><br><span class="line"><span class="comment">//一个JS对象</span></span><br><span class="line">var obj = <span class="punctuation">&#123;</span> name<span class="punctuation">:</span> <span class="string">&quot;zhangsan&quot;</span> <span class="punctuation">,</span> age<span class="punctuation">:</span> <span class="number">18</span> <span class="punctuation">&#125;</span>;</span><br></pre></td></tr></table></figure><h4 id="3、数组：第二种复杂数据类型，数组表示可以通过数值索引访问的值的有序列表。数组的值可以是任意类型，包含简单值、对象、甚至其他数组。"><a href="#3、数组：第二种复杂数据类型，数组表示可以通过数值索引访问的值的有序列表。数组的值可以是任意类型，包含简单值、对象、甚至其他数组。" class="headerlink" title="3、数组：第二种复杂数据类型，数组表示可以通过数值索引访问的值的有序列表。数组的值可以是任意类型，包含简单值、对象、甚至其他数组。"></a>3、数组：第二种复杂数据类型，数组表示可以通过数值索引访问的值的有序列表。数组的值可以是任意类型，包含简单值、对象、甚至其他数组。</h4><h4 id="JSON没有变量、函数或对象实例的概念。-JSON的所有记号都只为表示结构化数据，虽然他借用了-JavaScript-的语法，但是千万不要把他和-JavaScript-语言混淆。"><a href="#JSON没有变量、函数或对象实例的概念。-JSON的所有记号都只为表示结构化数据，虽然他借用了-JavaScript-的语法，但是千万不要把他和-JavaScript-语言混淆。" class="headerlink" title="JSON没有变量、函数或对象实例的概念。 JSON的所有记号都只为表示结构化数据，虽然他借用了 JavaScript 的语法，但是千万不要把他和 JavaScript 语言混淆。"></a>JSON没有变量、函数或对象实例的概念。 JSON的所有记号都只为表示结构化数据，虽然他借用了 JavaScript 的语法，但是千万不要把他和 JavaScript 语言混淆。</h4><h3 id="JSON-的格式：-“属性名1”-属性值1-“属性名2”-属性值2-“属性名3”-属性值3……”属性名N”-属性值N"><a href="#JSON-的格式：-“属性名1”-属性值1-“属性名2”-属性值2-“属性名3”-属性值3……”属性名N”-属性值N" class="headerlink" title="JSON 的格式：{ “属性名1”:属性值1, “属性名2”:属性值2, “属性名3”:属性值3……”属性名N”:属性值N}"></a>JSON 的格式：{ “属性名1”:属性值1, “属性名2”:属性值2, “属性名3”:属性值3……”属性名N”:属性值N}</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;className&quot;</span><span class="punctuation">:</span><span class="string">&quot;软件1班&quot;</span><span class="punctuation">,</span><span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span><span class="string">&quot;2020&quot;</span><span class="punctuation">,</span><span class="attr">&quot;students&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span><span class="string">&quot;李四&quot;</span><span class="punctuation">,</span><span class="string">&quot;王二&quot;</span><span class="punctuation">,</span><span class="string">&quot;赵六&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span>;</span><br></pre></td></tr></table></figure><h4 id="1、JSON和JS中的对象一样，要在代码的两端使用大括号"><a href="#1、JSON和JS中的对象一样，要在代码的两端使用大括号" class="headerlink" title="1、JSON和JS中的对象一样，要在代码的两端使用大括号"></a>1、JSON和JS中的对象一样，要在代码的两端使用大括号</h4><h4 id="2、JSON的属性和值是一-一对应的"><a href="#2、JSON的属性和值是一-一对应的" class="headerlink" title="2、JSON的属性和值是一 一对应的"></a>2、JSON的属性和值是一 一对应的</h4><h4 id="3、JSON的属性名使用双引号（在JS中可以不用双引号，但在其他语言中，有可能会报错）"><a href="#3、JSON的属性名使用双引号（在JS中可以不用双引号，但在其他语言中，有可能会报错）" class="headerlink" title="3、JSON的属性名使用双引号（在JS中可以不用双引号，但在其他语言中，有可能会报错）"></a>3、JSON的属性名使用双引号（在JS中可以不用双引号，但在其他语言中，有可能会报错）</h4><h4 id="4、JSON的属性值如果是字符串，一定要用双引号，单引号会报错。"><a href="#4、JSON的属性值如果是字符串，一定要用双引号，单引号会报错。" class="headerlink" title="4、JSON的属性值如果是字符串，一定要用双引号，单引号会报错。"></a>4、JSON的属性值如果是字符串，一定要用双引号，单引号会报错。</h4><h4 id="5、JSON的属性值可以是String、Number、Array数组、Object对象、Boolean布尔值、null空值（不能是undefined）"><a href="#5、JSON的属性值可以是String、Number、Array数组、Object对象、Boolean布尔值、null空值（不能是undefined）" class="headerlink" title="5、JSON的属性值可以是String、Number、Array数组、Object对象、Boolean布尔值、null空值（不能是undefined）"></a>5、JSON的属性值可以是String、Number、Array数组、Object对象、Boolean布尔值、null空值（不能是undefined）</h4><h4 id="虽然说JSON和JS对象有着一些区别，但是大部分时候我们都是这么用的，直到现在也有许多程序员把JS对象叫做JSON。（实际工作当中没有必要太较真）"><a href="#虽然说JSON和JS对象有着一些区别，但是大部分时候我们都是这么用的，直到现在也有许多程序员把JS对象叫做JSON。（实际工作当中没有必要太较真）" class="headerlink" title="虽然说JSON和JS对象有着一些区别，但是大部分时候我们都是这么用的，直到现在也有许多程序员把JS对象叫做JSON。（实际工作当中没有必要太较真）"></a>虽然说JSON和JS对象有着一些区别，但是大部分时候我们都是这么用的，直到现在也有许多程序员把JS对象叫做JSON。（实际工作当中没有必要太较真）</h4><h4 id="我们通过一段代码来演示如何使用JS代码针对JSON对象里数据进行增、删、改、查等操作"><a href="#我们通过一段代码来演示如何使用JS代码针对JSON对象里数据进行增、删、改、查等操作" class="headerlink" title="我们通过一段代码来演示如何使用JS代码针对JSON对象里数据进行增、删、改、查等操作"></a>我们通过一段代码来演示如何使用JS代码针对JSON对象里数据进行增、删、改、查等操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> json = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新增数据前：&quot;</span>, json);</span><br><span class="line"><span class="comment">// 新增属性 语法格式：对象.键名 = 键值</span></span><br><span class="line">json.<span class="property">name</span> = <span class="string">&quot;bobi&quot;</span>;</span><br><span class="line">json.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">json.<span class="property">tel</span> = <span class="string">&quot;13855667788&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新增数据后：&quot;</span>, json);</span><br><span class="line"><span class="comment">// 删除属性 语法格式：delete 对象.键名</span></span><br><span class="line"><span class="keyword">delete</span> json.<span class="property">tel</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">tel</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span><br><span class="line"><span class="comment">// 修改属性值 语法与新增相同</span></span><br><span class="line">json.<span class="property">age</span> = <span class="number">28</span>;</span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><h3 id="判断一个对象是否拥有某一个属性"><a href="#判断一个对象是否拥有某一个属性" class="headerlink" title="判断一个对象是否拥有某一个属性"></a>判断一个对象是否拥有某一个属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">const</span> json = &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;bobi&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;tel&quot;</span>: <span class="string">&quot;13855667788&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//判断json对象是否含有某个属性</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">isHasProp</span>(<span class="params">pName</span>)&#123;</span><br><span class="line">                <span class="comment">// 方法一：判断该属性值是否不等于null</span></span><br><span class="line">                <span class="keyword">if</span>(json[pName]!=<span class="literal">null</span>)&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`json对象的<span class="subst">$&#123;pName&#125;</span>属性存在`</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`json对象的<span class="subst">$&#123;pName&#125;</span>属性不存在`</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 方法二：判断该属性值是否不等于undefined</span></span><br><span class="line">                <span class="keyword">if</span>(json[pName]!=<span class="literal">undefined</span>)&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`json对象的<span class="subst">$&#123;pName&#125;</span>属性存在`</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`json对象的<span class="subst">$&#123;pName&#125;</span>属性不存在`</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 方式三：利用JS的布尔类型自动转换特性判断</span></span><br><span class="line">                <span class="keyword">if</span>(json[pName])&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`json对象的<span class="subst">$&#123;pName&#125;</span>属性存在`</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`json对象的<span class="subst">$&#123;pName&#125;</span>属性不存在`</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">isHasProp</span>(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JSON简介</title>
      <link href="/2024/05/14/JSON%E7%AE%80%E4%BB%8B/"/>
      <url>/2024/05/14/JSON%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="JSON简介"><a href="#JSON简介" class="headerlink" title="JSON简介"></a>JSON简介</h2><h3 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON"></a>什么是JSON</h3><h4 id="JSON-英文全称-JavaScript-Object-Notation-即：-JavaScript-对象简谱。在早先，互联网上前后端之间进行数据传输是使用XML，但XML过于复杂的dom操作被很多人吐槽。但在当时几乎没有其他的选择，人们就这样用啊，用啊，有人慢慢习惯了，也有人不习惯但是没有更好的解决方案，直到有一个叫“道格拉斯·克羅克福特”的人，他不仅不习惯使用XML而且还提出了更好的替代方案，就是JSON。"><a href="#JSON-英文全称-JavaScript-Object-Notation-即：-JavaScript-对象简谱。在早先，互联网上前后端之间进行数据传输是使用XML，但XML过于复杂的dom操作被很多人吐槽。但在当时几乎没有其他的选择，人们就这样用啊，用啊，有人慢慢习惯了，也有人不习惯但是没有更好的解决方案，直到有一个叫“道格拉斯·克羅克福特”的人，他不仅不习惯使用XML而且还提出了更好的替代方案，就是JSON。" class="headerlink" title="JSON 英文全称 JavaScript Object Notation 即： JavaScript 对象简谱。在早先，互联网上前后端之间进行数据传输是使用XML，但XML过于复杂的dom操作被很多人吐槽。但在当时几乎没有其他的选择，人们就这样用啊，用啊，有人慢慢习惯了，也有人不习惯但是没有更好的解决方案，直到有一个叫“道格拉斯·克羅克福特”的人，他不仅不习惯使用XML而且还提出了更好的替代方案，就是JSON。"></a>JSON 英文全称 JavaScript Object Notation 即： JavaScript 对象简谱。在早先，互联网上前后端之间进行数据传输是使用XML，但XML过于复杂的dom操作被很多人吐槽。但在当时几乎没有其他的选择，人们就这样用啊，用啊，有人慢慢习惯了，也有人不习惯但是没有更好的解决方案，直到有一个叫“道格拉斯·克羅克福特”的人，他不仅不习惯使用XML而且还提出了更好的替代方案，就是JSON。</h4><h4 id="JSON是一种格式，是一种规范，是一种约定，JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C-C-C-Java-JavaScript-Perl-Python等）。-这些特性使JSON成为理想的数据交换语言。"><a href="#JSON是一种格式，是一种规范，是一种约定，JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C-C-C-Java-JavaScript-Perl-Python等）。-这些特性使JSON成为理想的数据交换语言。" class="headerlink" title="JSON是一种格式，是一种规范，是一种约定，JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。"></a>JSON是一种格式，是一种规范，是一种约定，JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。</h4><h4 id="JSON-是轻量级的文本数据交换格式，是用于存储和传输数据的格式。"><a href="#JSON-是轻量级的文本数据交换格式，是用于存储和传输数据的格式。" class="headerlink" title="JSON 是轻量级的文本数据交换格式，是用于存储和传输数据的格式。"></a>JSON 是轻量级的文本数据交换格式，是用于存储和传输数据的格式。</h4><h4 id="目前主流的计算机语言几乎都支持JSON。"><a href="#目前主流的计算机语言几乎都支持JSON。" class="headerlink" title="目前主流的计算机语言几乎都支持JSON。"></a>目前主流的计算机语言几乎都支持JSON。</h4><h4 id="JSON-通常用于服务端向网页端传递数据-。"><a href="#JSON-通常用于服务端向网页端传递数据-。" class="headerlink" title="JSON 通常用于服务端向网页端传递数据 。"></a>JSON 通常用于服务端向网页端传递数据 。</h4><h4 id="一段按照标准格式书写的JSON字符串，可以迅速转换成计算机程序中的对象。"><a href="#一段按照标准格式书写的JSON字符串，可以迅速转换成计算机程序中的对象。" class="headerlink" title="一段按照标准格式书写的JSON字符串，可以迅速转换成计算机程序中的对象。"></a>一段按照标准格式书写的JSON字符串，可以迅速转换成计算机程序中的对象。</h4><h3 id="JSON的数据格式"><a href="#JSON的数据格式" class="headerlink" title="JSON的数据格式"></a>JSON的数据格式</h3><h4 id="json具有6种数据形式，object-array-string-number-true-false-null"><a href="#json具有6种数据形式，object-array-string-number-true-false-null" class="headerlink" title="json具有6种数据形式，object, array, string, number, true, false, null"></a>json具有6种数据形式，object, array, string, number, true, false, null</h4><h4 id="作为一个后来者，我们往前回顾的时候，不能不诧异于其思想和设计的优秀。使用JSON几乎可以表示一切数据，真的是万物皆可JSON。JSON的发展速度很快，以至于目前前端和服务器进行数据传输主要通过json格式进行。"><a href="#作为一个后来者，我们往前回顾的时候，不能不诧异于其思想和设计的优秀。使用JSON几乎可以表示一切数据，真的是万物皆可JSON。JSON的发展速度很快，以至于目前前端和服务器进行数据传输主要通过json格式进行。" class="headerlink" title="作为一个后来者，我们往前回顾的时候，不能不诧异于其思想和设计的优秀。使用JSON几乎可以表示一切数据，真的是万物皆可JSON。JSON的发展速度很快，以至于目前前端和服务器进行数据传输主要通过json格式进行。"></a>作为一个后来者，我们往前回顾的时候，不能不诧异于其思想和设计的优秀。使用JSON几乎可以表示一切数据，真的是万物皆可JSON。JSON的发展速度很快，以至于目前前端和服务器进行数据传输主要通过json格式进行。</h4><h4 id="在JSON之前，肯定有各种各样的数据格式的约定。JSON能够被广泛的时候，除了良好的宣传之外，还有就是JSON确实简单和方便。"><a href="#在JSON之前，肯定有各种各样的数据格式的约定。JSON能够被广泛的时候，除了良好的宣传之外，还有就是JSON确实简单和方便。" class="headerlink" title="在JSON之前，肯定有各种各样的数据格式的约定。JSON能够被广泛的时候，除了良好的宣传之外，还有就是JSON确实简单和方便。"></a>在JSON之前，肯定有各种各样的数据格式的约定。JSON能够被广泛的时候，除了良好的宣传之外，还有就是JSON确实简单和方便。</h4><h4 id="秦始皇消灭七国，统一天下，统一度量衡，主要靠的是武力。"><a href="#秦始皇消灭七国，统一天下，统一度量衡，主要靠的是武力。" class="headerlink" title="秦始皇消灭七国，统一天下，统一度量衡，主要靠的是武力。"></a>秦始皇消灭七国，统一天下，统一度量衡，主要靠的是武力。</h4><h4 id="假如美帝拿出原子弹来，并声明如果你不使用JSON我就要用原子弹毁灭你，最后可能产生两种结果，一是JSON一统天下，二是世界大战，最后产生一个不确定的结果，JSON可能一统天下，也有可能是天下都不存在了。"><a href="#假如美帝拿出原子弹来，并声明如果你不使用JSON我就要用原子弹毁灭你，最后可能产生两种结果，一是JSON一统天下，二是世界大战，最后产生一个不确定的结果，JSON可能一统天下，也有可能是天下都不存在了。" class="headerlink" title="假如美帝拿出原子弹来，并声明如果你不使用JSON我就要用原子弹毁灭你，最后可能产生两种结果，一是JSON一统天下，二是世界大战，最后产生一个不确定的结果，JSON可能一统天下，也有可能是天下都不存在了。"></a>假如美帝拿出原子弹来，并声明如果你不使用JSON我就要用原子弹毁灭你，最后可能产生两种结果，一是JSON一统天下，二是世界大战，最后产生一个不确定的结果，JSON可能一统天下，也有可能是天下都不存在了。</h4><h4 id="现实情况是并没有人威胁你必须要使用JSON，但是JSON能够被大部分人接受，靠的是一种优秀的思想，靠的是确实提供了方便，使用JSON的人，实打实的接受了好处，所以JSON自然而然的就推广开来了。"><a href="#现实情况是并没有人威胁你必须要使用JSON，但是JSON能够被大部分人接受，靠的是一种优秀的思想，靠的是确实提供了方便，使用JSON的人，实打实的接受了好处，所以JSON自然而然的就推广开来了。" class="headerlink" title="现实情况是并没有人威胁你必须要使用JSON，但是JSON能够被大部分人接受，靠的是一种优秀的思想，靠的是确实提供了方便，使用JSON的人，实打实的接受了好处，所以JSON自然而然的就推广开来了。"></a>现实情况是并没有人威胁你必须要使用JSON，但是JSON能够被大部分人接受，靠的是一种优秀的思想，靠的是确实提供了方便，使用JSON的人，实打实的接受了好处，所以JSON自然而然的就推广开来了。</h4><h3 id="JSON的缺点"><a href="#JSON的缺点" class="headerlink" title="JSON的缺点"></a>JSON的缺点</h3><h4 id="JSON不能注释，不太适合做配置文件。"><a href="#JSON不能注释，不太适合做配置文件。" class="headerlink" title="JSON不能注释，不太适合做配置文件。"></a>JSON不能注释，不太适合做配置文件。</h4><h4 id="JSON有冗余。"><a href="#JSON有冗余。" class="headerlink" title="JSON有冗余。"></a>JSON有冗余。</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/13/hello-world/"/>
      <url>/2024/05/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
